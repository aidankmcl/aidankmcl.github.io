---
import { Icon } from "astro-icon/components";

import NavItem from "../components/NavItem.astro";

import { constants } from "~/ui";
---

<div class="flex flex-col m-0 b-purple bg-white p-y-6 p-x-8 b-b-2 lg:p-15 lg:b-0 lg:b-r-2 lg:h-full">
  <a href="/"><h1 class="hidden lg:f-s-1 lg:block xl:f-s-0">Aidan McLaughlin</h1></a>
  <div class="lg:hidden flex justify-between items-center">
    <a href="/"><h1 class="inline-block">AM</h1></a>
    <Icon id="menu-toggle" name="mdi:menu" class="f-s-0 text-purple" />
  </div>

  <hr class="b-purple b-1 my-6 hidden lg:block" />

  <div id="links-container" class="flex flex-col grow lg:justify-between h-full">
    <ul class="mt-3">
      {
        constants.links.nav.map((link) => (
          <li>
            <NavItem id={link.href} class="navbar-link lg:f-s-2 xl:f-s-1" href={`/#${link.href}`}>
              {link.text}
            </NavItem>
          </li>
        ))
      }
    </ul>

    <hr class="m-y-5 lg:hidden" />

    <ul class="lg:mb-3">
      {
        constants.links.work.map((link) => (
          <li>
            <NavItem id={link.href} class="navbar-link lg:f-s-2 xl:f-s-1" href={`/${link.href}`}>
              {link.text}
            </NavItem>
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style is:global>
  @screen lt-lg {
    #links-container {
      --uno: absolute z-3 top-0 bottom-0 h-full bg-white p-12 b-r-2 b-purple;
      left: -20rem;
      transition: left 300ms ease-in-out;
      overflow: hidden;
    }

    #links-container.open {
      --uno: left-0;
    }
  }
</style>

<script>
  function init() {
    const container = document.querySelector("main");

    const mobileMenuToggle = document.getElementById("menu-toggle");
    const linksContainer = document.getElementById("links-container");
    const links = document.querySelectorAll(".navbar-link");

    const scrollSections = ([...(document.querySelectorAll(".scroll-section") || [])] as HTMLElement[]).sort(
      (a, b) => b.offsetTop - a.offsetTop,
    );

    mobileMenuToggle?.addEventListener("click", () => {
      let sidebarOpen = document.getElementById("links-container")?.classList.toString().includes("open");
      linksContainer?.classList.toggle("open", !sidebarOpen);

      if (!sidebarOpen) {
        console.log(document.getElementById("links-container")?.classList);
        const abortController = new AbortController();
        window.addEventListener(
          "click",
          (evt) => {
            let target = evt.target as HTMLElement;
            // Skip toggle if "outside click" was on navbar toggle button
            if (mobileMenuToggle.contains(target)) {
              abortController.abort();
            } else if (!linksContainer?.contains(target)) {
              linksContainer?.classList.toggle("open", false);
              abortController.abort();
            }
          },
          { capture: true, signal: abortController.signal },
        );
      }
    });

    const targetLocation = window.location.hash.replace("#", "");
    scrollToSection(targetLocation);

    function scrollToSection(id?: string | undefined) {
      if (!id) return;

      let targetSection = scrollSections.find((section) => section.id === id);
      if (targetSection && container) {
        container.scrollTo({
          top: targetSection.offsetTop,
          // behavior: "smooth",
          behavior: "instant",
        });
      }
    }

    function checkScroll() {
      if (!container) return;

      const currentSection = scrollSections.find((section) => {
        let sectionTop = section.offsetTop;
        let scrollHeight = container.scrollTop;

        return scrollHeight > sectionTop - 20;
      });

      if (currentSection) {
        let currentHighlight = [...links].find((el) => el.classList.contains("active"));

        if (!currentHighlight || currentHighlight.id !== currentSection.id) {
          links.forEach((el) => {
            el.classList.remove("active");
          });

          let sidebarLink = document.getElementById(currentSection.id);
          sidebarLink?.classList.add("active");
          window.history.pushState({ urlPath: window.location.pathname }, "", "#" + currentSection.id);
        }
      }
    }

    if (container && scrollSections.length) {
      container.addEventListener("scroll", checkScroll);
    }

    window.addEventListener("load", checkScroll);

    links.forEach((el) => {
      el.addEventListener("click", () => scrollToSection(el.id));
    });

    document.addEventListener("astro:before-swap", () => {
      window.removeEventListener("load", checkScroll);
      if (container && scrollSections.length) {
        container.removeEventListener("scroll", checkScroll);
      }
    });
  }

  init();
  document.addEventListener("astro:after-swap", init);
</script>
