---
import { ViewTransitions } from "astro:transitions";

import "@unocss/reset/normalize.css";

import Sidebar from "./Sidebar.astro";
import { constants } from "~/ui";

export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en" class="bg-purple">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions />
  </head>
  <body class="">
    <div class="p-5 app-container">
      <div class="sidebar b-purple">
        <Sidebar />
      </div>

      <div class="content m-0 relative overflow-hidden">
        <div class="relative h-full">
          <main class="h-full overflow-auto relative">
            <slot />
          </main>
        </div>
      </div>
    </div>
    <!-- CSS Specific to Overall Layout -->
    <style
      define:vars={{
        purple: constants.colors["purple"],
        lightPurple: constants.colors["lightPurple"],
        borderRadius: "0.6rem",
      }}
      is:global
    >
      .app-container {
        height: 100%;
        border-radius: 1rem;
        max-width: 100rem;
        margin: 0 auto;
        display: grid;
        grid-template-areas: "sidebar content";
        grid-template-rows: 1fr;
        grid-template-columns: min-content 1fr;
      }

      .sidebar {
        grid-area: sidebar;
        /* border-radius: 0.8rem 0 0 0.8rem; */
        border-radius: var(--borderRadius) 0 0 var(--borderRadius);
        overflow: hidden;
      }

      .content {
        grid-area: content;
        background: white;
        border-radius: 0 var(--borderRadius) var(--borderRadius) 0;
      }

      .content main {
        scrollbar-color: var(--purple) var(--lightPurple);
        scrollbar-width: thin;
      }

      @screen lt-lg {
        .app-container {
          grid-template-areas: "sidebar" "content";
          grid-template-rows: min-content 1fr;
          grid-template-columns: 1fr;
        }

        .sidebar {
          border-radius: var(--borderRadius) var(--borderRadius) 0 0;
        }

        .content {
          border-radius: 0 0 var(--borderRadius) var(--borderRadius);
        }
      }
    </style>

    <!-- Global CSS -->
    <style is:global>
      * {
        box-sizing: border-box;
      }

      @screen lt-lg {
        html,
        body {
          font-size: 12px;
        }
      }

      h1,
      h2 {
        --uno: header-text;
      }

      h3,
      h4,
      h5,
      h6 {
        --uno: subhead-text f-s-2 text-gray m-b-3;
      }

      ul li,
      p {
        --uno: body-text;
      }

      p:not(:last-child) {
        --uno: m-b-6;
      }

      strong,
      a {
        --uno: text-purple fw-400;
      }

      hr {
        --uno: b-t-2 b-purple;
      }

      .markdown {
        ul {
          list-style: circle;
          --uno: p-l-5 m-b-6;
        }

        a {
          --uno: underline;
        }

        img {
          max-height: 90vh;
          --uno: object-contain m-b-6;
        }
      }

      /*
        * Based on: https://codepen.io/kootoopas/pen/kGPoaB
        * Twitter: @kootoopas
        * Using: https://www.toptal.com/designers/subtlepatterns/memphis-mini-pattern/
        */

      @keyframes bg-scrolling-reverse {
        100% {
          background-position: 400px 400px;
        }
      }

      @keyframes bg-scrolling {
        0% {
          background-position: 400px 400px;
        }
      }
      /* Main styles */
      .squiggle-loader {
        text-align: center;
        background: url("../assets/images/graphics/pattern.png") repeat 0 0;
        animation: bg-scrolling-reverse 8s infinite;
        animation-timing-function: linear;
      }
    </style>

    <!-- Script and styling for addressing mobile browsers with top / bottom bars -->
    <script>
      const appHeight = () => {
        const doc = document.documentElement;
        doc.style.setProperty("--app-height", `${window.innerHeight}px`);
      };
      window.addEventListener("resize", appHeight);
      appHeight();
    </script>
    <style>
      :root {
        --app-height: 100%;
      }

      html,
      body {
        height: 100vh;
        height: var(--app-height);
      }
    </style>
  </body>
</html>
